#-----------------------------------------------------
# 문자열 str 데이터 다루기
#-----------------------------------------------------
## 여러줄 문자열 ==> ''' ''' 또는  """ """
msg='''
오늘은

좋은날
기쁜날

'''

print(f' msg=> {msg}')


## 인덱싱  : 문자열 안에 문자 한개 한개를 식별하는 방법
## - 원소/요소 : 문자열 안에 문자1개
## - 문법 : 변수명[인덱스], 문자열데이터[인덱스]
## - 인덱스 종류
## * 왼 >>> 오 : 0,1,2,......
## * 왼 <<< 오 : ........-2,-1
#-------------------------------------------------------------
msg="good luck!"
    
msg2=''

# 문자열 전체 출력
print(msg)

# 문자열 내 원소 출력
print(msg[0])
print(msg[4])
print(msg[-1])


#print(msg2[0])

# 원소 /요소의 갯수를 파악해주는 내장함수 len()
# - 원소 /요소를 가지고 있는 데이터 타입에만 사용 가능
print(len(msg))

# 제일마지막 원소/요소만 출력

print(msg[3],len(msg)-1,msg[-1])

data= "Happy New Year 2025! Good Luck"
#      012345678901234567890123456789
print(f' 인덱스 범위 : 0~ {len(data)-1}')
#-------------------------------------------------------------
## 슬라이싱: 문자열 내에 연속된 요소/원소 추출방법
## - 문법 : 변수명[시작: 끝+1 ] 시작인덱스 이상~ 끝인덱스 미만
#-------------------------------------------------------------


print(data[15],data[16],data[17],data[18],data[19],sep='')
print(data[15:20])
#변수명[ : 끝인덱스] : 처음부터 끝까지
#변수명[ 시작인덱스 : ] : 끝까지 의미
#변수명[:] : 처음부터 끝까지

a= "Life is too short, you need python"
print(a[0:4])
print(a[0:3])
print(a[19:])
print(a[:17])
print(a[19:-7])
print(len(a))

#-------------------------------------------------------------
## 슬라이싱: 문자열 내에 연속된 요소/원소 추출방법
## - 문법 : 변수명[시작: 끝+1 :간격 ] 
#-------------------------------------------------------------
data='0123456789'
#     01234567890
#2,4,6,8 만 추출하기
print(data[2],data[4],data[6],data[7])

# 인덱스가 2칸식 증가하는 규칙
print(data[1:8:2])
print(data[1: :2])


#문자열에서 숫자만
data='abc1def2gfi3jkl4mno5pqr6stu'
#     0123456789 123456789 12345678


print(data[3:37:4])
print(data[3:len(data):4])